/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */

//import org.gradle.api.tasks.testing.logging.TestExceptionFormat
//import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    id 'idea'
    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id "io.freefair.lombok" version "8.12.1"
    id "com.adarshr.test-logger" version "3.2.0"
}


testlogger {
    theme 'mocha' // project level
    slowThreshold 5000
}

repositories {
    mavenCentral()
    maven{
        url "https://packages.atlassian.com/mvn/maven-atlassian-external/"
    }
    maven  {
        url "https://repo1.maven.org/maven2"
    }
}

dependencies {
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'ch.qos.logback:logback-classic:1.4.14'
    implementation 'ch.qos.logback:logback-core:1.4.14'
    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
    }
    //looks like test rails lib requires it
    implementation 'com.restbusters:qreasp:0.0.53'
    implementation group: 'com.codepine.api', name: 'testrail-api-java-client', version: '2.0.2'
    //apache
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.8'
    implementation group: 'org.apache.directory.studio', name: 'org.apache.commons.io', version: '2.4'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    implementation group: 'org.aeonbits.owner', name: 'owner', version: '1.0.10'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.5'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.5'
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.8'
    implementation 'com.datadoghq:datadog-api-client:1.0.0-beta.9'
    //compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'
    implementation('com.jayway.jsonpath:json-path:2.4.0')
    implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.30'
    implementation group: 'com.flipkart.zjsonpatch', name: 'zjsonpatch', version: '0.4.11'
    implementation group: 'com.massisframework', name: 'j-text-utils', version: '0.3.4'
    implementation 'org.testng:testng:7.4.0'
    //testImplementation files('libs/testng-rails-integration-0.0.1.jar')
    implementation 'com.restbusters:testng-rails-integration:0.0.1'
    implementation 'org.fusesource.jansi:jansi:2.4.0'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.36.0'
    // Use TestNG framework, also requires calling com.restbusters.test.useTestNG() below
    //testImplementation("org.hamcrest:hamcrest-all:1.3")
    testImplementation 'org.testng:testng:7.4.0'
    testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
}

sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

task checkEnvironment {
    doFirst {
        def requiredEnvVars = ['PASS_KEY'] // Add your required env vars here
        def missingVars = requiredEnvVars.findAll { !System.getenv(it) }

        if (missingVars) {
            throw new GradleException("Missing required environment variables: ${missingVars.join(', ')}")
        } else {
            println "All required environment variables are set."
        }
    }
}

task demoTest(type: Test) {
    def testXml = null;
    println "System getEnv ${System.getenv()}"
    println "System getProp ${System.getProperties()}"
    System.getProperties().each { key, value ->
        if(key.startsWith("DEMO")){
            println "Name: $key Value: $value"
            systemProperty key, value
        }
        if(key.startsWith('ELASTIC')){
            println "Name: $key Value: $value"
            systemProperty key, value
        }
        if(key == 'TEST_XML'){
            println "Name: $key Value: $value"
            testXml = value
        }
    }
    println "Task xml: ${testXml}.xml"
    minHeapSize = "128m"
    maxHeapSize = "1024m"
    useTestNG() {
        suites "src/test/resources/tests/${testXml}.xml"
        useDefaultListeners = true
    }
    testLogging {
        exceptionFormat = 'full'
        showStackTraces = "true"
        showStandardStreams = 'true'
    }
}

tasks.demoTest.dependsOn 'checkEnvironment'
